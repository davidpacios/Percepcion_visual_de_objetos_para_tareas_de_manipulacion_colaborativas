;; Auto-generated. Do not edit!


(when (boundp 'panda_demo::GsFeedback)
  (if (not (find-package "PANDA_DEMO"))
    (make-package "PANDA_DEMO"))
  (shadow 'GsFeedback (find-package "PANDA_DEMO")))
(unless (find-package "PANDA_DEMO::GSFEEDBACK")
  (make-package "PANDA_DEMO::GSFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude GsFeedback.msg.html


(defclass panda_demo::GsFeedback
  :super ros::object
  :slots (_calibrated ))

(defmethod panda_demo::GsFeedback
  (:init
   (&key
    ((:calibrated __calibrated) nil)
    )
   (send-super :init)
   (setq _calibrated __calibrated)
   self)
  (:calibrated
   (&optional (__calibrated :null))
   (if (not (eq __calibrated :null)) (setq _calibrated __calibrated)) _calibrated)
  (:serialization-length
   ()
   (+
    ;; bool _calibrated
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; bool _calibrated
       (if _calibrated (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; bool _calibrated
     (setq _calibrated (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get panda_demo::GsFeedback :md5sum-) "57ce5b1e5005f046a42a167a2178463c")
(setf (get panda_demo::GsFeedback :datatype-) "panda_demo/GsFeedback")
(setf (get panda_demo::GsFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback
bool calibrated


")



(provide :panda_demo/GsFeedback "57ce5b1e5005f046a42a167a2178463c")


