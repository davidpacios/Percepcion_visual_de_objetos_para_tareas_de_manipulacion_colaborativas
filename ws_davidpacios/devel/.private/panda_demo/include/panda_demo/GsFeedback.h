// Generated by gencpp from file panda_demo/GsFeedback.msg
// DO NOT EDIT!


#ifndef PANDA_DEMO_MESSAGE_GSFEEDBACK_H
#define PANDA_DEMO_MESSAGE_GSFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_demo
{
template <class ContainerAllocator>
struct GsFeedback_
{
  typedef GsFeedback_<ContainerAllocator> Type;

  GsFeedback_()
    : calibrated(false)  {
    }
  GsFeedback_(const ContainerAllocator& _alloc)
    : calibrated(false)  {
  (void)_alloc;
    }



   typedef uint8_t _calibrated_type;
  _calibrated_type calibrated;





  typedef boost::shared_ptr< ::panda_demo::GsFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_demo::GsFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct GsFeedback_

typedef ::panda_demo::GsFeedback_<std::allocator<void> > GsFeedback;

typedef boost::shared_ptr< ::panda_demo::GsFeedback > GsFeedbackPtr;
typedef boost::shared_ptr< ::panda_demo::GsFeedback const> GsFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_demo::GsFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_demo::GsFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_demo::GsFeedback_<ContainerAllocator1> & lhs, const ::panda_demo::GsFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.calibrated == rhs.calibrated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_demo::GsFeedback_<ContainerAllocator1> & lhs, const ::panda_demo::GsFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::panda_demo::GsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_demo::GsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_demo::GsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_demo::GsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_demo::GsFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_demo::GsFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_demo::GsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57ce5b1e5005f046a42a167a2178463c";
  }

  static const char* value(const ::panda_demo::GsFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57ce5b1e5005f046ULL;
  static const uint64_t static_value2 = 0xa42a167a2178463cULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_demo::GsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_demo/GsFeedback";
  }

  static const char* value(const ::panda_demo::GsFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_demo::GsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"bool calibrated\n"
"\n"
;
  }

  static const char* value(const ::panda_demo::GsFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_demo::GsFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.calibrated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GsFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_demo::GsFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_demo::GsFeedback_<ContainerAllocator>& v)
  {
    s << indent << "calibrated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibrated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_DEMO_MESSAGE_GSFEEDBACK_H
